{
  "stats": {
    "suites": 10,
    "tests": 41,
    "passes": 41,
    "pending": 0,
    "failures": 0,
    "start": "2022-12-06T06:31:56.293Z",
    "end": "2022-12-06T06:31:56.369Z",
    "duration": 76,
    "testsRegistered": 41,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "0a7dde78-3583-438c-b092-d204b800e81a",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "91ada6f2-ee43-4b74-a8cf-5a8564586f1c",
          "title": "1.\tComo usuario, necesito iniciar sesión en el sistema con un nombre de usuario y contraseña",
          "fullFile": "C:\\Users\\korn1\\OneDrive\\Escritorio\\CESUN\\C09_01_PROGRAMACIÓN ORIENTADA A PRUEBAS\\tdd_Integrador\\test\\01 registroUsuarios.test.js",
          "file": "\\test\\01 registroUsuarios.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "a.\tSi esta registrado",
              "fullTitle": "1.\tComo usuario, necesito iniciar sesión en el sistema con un nombre de usuario y contraseña a.\tSi esta registrado",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const usuario = {\n  nombre: \"prueba\",\n  password: \"prueba\",\n};\nconst resultado = registroUsuario(usuario);\nexpect(resultado).to.be.true;",
              "err": {},
              "uuid": "f3bf70e9-1c95-423d-9a7f-0114e6771d97",
              "parentUUID": "91ada6f2-ee43-4b74-a8cf-5a8564586f1c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "b.\tError cuando el nombre de usuario o la contraseña están vacíos",
              "fullTitle": "1.\tComo usuario, necesito iniciar sesión en el sistema con un nombre de usuario y contraseña b.\tError cuando el nombre de usuario o la contraseña están vacíos",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const usuario = {\n  nombre: \"prueba\",\n  password: \"\",\n};\nassert.throws(\n  () => registroUsuario(usuario),\n  Error,\n  \"usuario o la contraseña están vacíos\"\n);",
              "err": {},
              "uuid": "78470647-c68d-41d2-8f78-366b4504ab42",
              "parentUUID": "91ada6f2-ee43-4b74-a8cf-5a8564586f1c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "c.\tError cuando el usuario es incorrecto",
              "fullTitle": "1.\tComo usuario, necesito iniciar sesión en el sistema con un nombre de usuario y contraseña c.\tError cuando el usuario es incorrecto",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const usuario = {\n  nombre: \"prueba1\",\n  password: \"prueba\",\n};\nconst resultado = registroUsuario(usuario);\nexpect(resultado).to.be.false;",
              "err": {},
              "uuid": "426e28b4-1ee5-4815-883b-e60e6619250c",
              "parentUUID": "91ada6f2-ee43-4b74-a8cf-5a8564586f1c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "d.\tError con Contraseña incorrecta",
              "fullTitle": "1.\tComo usuario, necesito iniciar sesión en el sistema con un nombre de usuario y contraseña d.\tError con Contraseña incorrecta",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const usuario = {\n  nombre: \"prueba\",\n  password: \"prueba1\",\n};\nconst resultado = registroUsuario(usuario);\nexpect(resultado).to.be.false;",
              "err": {},
              "uuid": "8c44ab02-3edb-4e5e-a9f0-1608043c2bd5",
              "parentUUID": "91ada6f2-ee43-4b74-a8cf-5a8564586f1c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "e.\tError por Usuario sin parametros suficientes",
              "fullTitle": "1.\tComo usuario, necesito iniciar sesión en el sistema con un nombre de usuario y contraseña e.\tError por Usuario sin parametros suficientes",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const usuario = {};\nconst resultado = registroUsuario(usuario);\nexpect(resultado).to.be.false;",
              "err": {},
              "uuid": "1a68fe71-e708-4aaa-9ca6-b11adf37db40",
              "parentUUID": "91ada6f2-ee43-4b74-a8cf-5a8564586f1c",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "f3bf70e9-1c95-423d-9a7f-0114e6771d97",
            "78470647-c68d-41d2-8f78-366b4504ab42",
            "426e28b4-1ee5-4815-883b-e60e6619250c",
            "8c44ab02-3edb-4e5e-a9f0-1608043c2bd5",
            "1a68fe71-e708-4aaa-9ca6-b11adf37db40"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "27b9ead0-717c-4ea1-b329-a4cc5c2f1e7e",
          "title": "2.\tComo Sistema, necesito un control de usuarios por roles, para limitar las opciones a utilizar. ",
          "fullFile": "C:\\Users\\korn1\\OneDrive\\Escritorio\\CESUN\\C09_01_PROGRAMACIÓN ORIENTADA A PRUEBAS\\tdd_Integrador\\test\\02 controlRoles.test.js",
          "file": "\\test\\02 controlRoles.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "a.\tEl rol usuario es Administrador",
              "fullTitle": "2.\tComo Sistema, necesito un control de usuarios por roles, para limitar las opciones a utilizar.  a.\tEl rol usuario es Administrador",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const usuario = administradorPrueba;\nconst resultado = controlRoles(usuario.rol);\nexpect(resultado).to.equal(0);",
              "err": {},
              "uuid": "756af60e-444b-40ea-be66-334a7024b2fd",
              "parentUUID": "27b9ead0-717c-4ea1-b329-a4cc5c2f1e7e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "b.\tEl rol usuario es Lider",
              "fullTitle": "2.\tComo Sistema, necesito un control de usuarios por roles, para limitar las opciones a utilizar.  b.\tEl rol usuario es Lider",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const usuario = liderPrueba;\nconst resultado = controlRoles(usuario.rol);\nexpect(resultado).to.equal(1);",
              "err": {},
              "uuid": "1bb0fc22-b7b9-46d3-aa0e-dad6aa7cfc15",
              "parentUUID": "27b9ead0-717c-4ea1-b329-a4cc5c2f1e7e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "c.\tEl rol usuario es Empleado",
              "fullTitle": "2.\tComo Sistema, necesito un control de usuarios por roles, para limitar las opciones a utilizar.  c.\tEl rol usuario es Empleado",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const usuario = empleadoPrueba;\nconst resultado = controlRoles(usuario.rol);\nexpect(resultado).to.equal(2);",
              "err": {},
              "uuid": "ab61bd7e-2b9e-4723-8228-1ceaa3daf8d0",
              "parentUUID": "27b9ead0-717c-4ea1-b329-a4cc5c2f1e7e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "d.\tError cuando el rol de usuario no existe",
              "fullTitle": "2.\tComo Sistema, necesito un control de usuarios por roles, para limitar las opciones a utilizar.  d.\tError cuando el rol de usuario no existe",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const usuario = undefined;\nconst resultado = controlRoles(usuario?.rol);\nexpect(resultado).to.equal(null);",
              "err": {},
              "uuid": "6e83cb26-90f1-4d72-8f0b-2c6f370a7d09",
              "parentUUID": "27b9ead0-717c-4ea1-b329-a4cc5c2f1e7e",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "756af60e-444b-40ea-be66-334a7024b2fd",
            "1bb0fc22-b7b9-46d3-aa0e-dad6aa7cfc15",
            "ab61bd7e-2b9e-4723-8228-1ceaa3daf8d0",
            "6e83cb26-90f1-4d72-8f0b-2c6f370a7d09"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "587ec750-90af-4d44-8a54-9700480749e5",
          "title": "3.\tComo Administrador, necesito poder dar de alta usuarios",
          "fullFile": "C:\\Users\\korn1\\OneDrive\\Escritorio\\CESUN\\C09_01_PROGRAMACIÓN ORIENTADA A PRUEBAS\\tdd_Integrador\\test\\03 registroUsuariosAdministrador.test.js",
          "file": "\\test\\03 registroUsuariosAdministrador.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "a.\tUsuario creado correctamente",
              "fullTitle": "3.\tComo Administrador, necesito poder dar de alta usuarios a.\tUsuario creado correctamente",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const usuario = administradorPrueba;\nconst nuevoUsuario = {\n  nombre: \"Nuevo Usuario\",\n  password: \"new\",\n  email: \"nuevousuario@gmal.com\",\n  rol: \"empleado\",\n};\nconst resultado = adminCrearUsuario(usuario, nuevoUsuario);\nexpect(resultado).to.be.true;",
              "err": {},
              "uuid": "c44b7a4d-0f6e-47df-8260-f165093b7e0d",
              "parentUUID": "587ec750-90af-4d44-8a54-9700480749e5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "b.\tError si usuario esta duplicado",
              "fullTitle": "3.\tComo Administrador, necesito poder dar de alta usuarios b.\tError si usuario esta duplicado",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const usuario = administradorPrueba;\nconst nuevoUsuario = {\n  nombre: \"prueba\",\n  password: \"prueba\",\n};\nassert.throws(\n  () => adminCrearUsuario(usuario, nuevoUsuario),\n  Error,\n  \"Error usuario duplicado\"\n);",
              "err": {},
              "uuid": "d628e5c3-782b-429d-bda3-b7fb3e64d158",
              "parentUUID": "587ec750-90af-4d44-8a54-9700480749e5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "c.\tError al intentar crear sin tener Rol Administrador",
              "fullTitle": "3.\tComo Administrador, necesito poder dar de alta usuarios c.\tError al intentar crear sin tener Rol Administrador",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const usuario = empleadoPrueba;\nconst nuevoUsuario = {\n  nombre: \"Nuevo Usuario\",\n  password: \"nuevousuario\",\n};\nassert.throws(\n  () => adminCrearUsuario(usuario, nuevoUsuario),\n  Error,\n  \"Su rol no cuenta con el permiso necesario\"\n);",
              "err": {},
              "uuid": "3bca0593-7a1e-420f-b34e-8cc84284e432",
              "parentUUID": "587ec750-90af-4d44-8a54-9700480749e5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "d.\tError parámetros incorrectos.",
              "fullTitle": "3.\tComo Administrador, necesito poder dar de alta usuarios d.\tError parámetros incorrectos.",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const usuario = administradorPrueba;\nconst nuevoUsuario = {\n  nombre: \"\",\n  password: \"\",\n  rol: \"\",\n};\nassert.throws(\n  () => adminCrearUsuario(usuario, nuevoUsuario),\n  Error,\n  \"Nombre de usuario o contraseña vacia\"\n);",
              "err": {},
              "uuid": "af4de718-13c2-45ff-afc4-55063d0237fa",
              "parentUUID": "587ec750-90af-4d44-8a54-9700480749e5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "e.\tError por Usuario sin parametros suficientes",
              "fullTitle": "3.\tComo Administrador, necesito poder dar de alta usuarios e.\tError por Usuario sin parametros suficientes",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const usuario = administradorPrueba;\nconst nuevoUsuario = {};\nassert.throws(\n  () => adminCrearUsuario(usuario, nuevoUsuario),\n  Error,\n  \"Faltan parametros\"\n);",
              "err": {},
              "uuid": "d544ce7a-7f55-465c-88bd-0563b42c7791",
              "parentUUID": "587ec750-90af-4d44-8a54-9700480749e5",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "c44b7a4d-0f6e-47df-8260-f165093b7e0d",
            "d628e5c3-782b-429d-bda3-b7fb3e64d158",
            "3bca0593-7a1e-420f-b34e-8cc84284e432",
            "af4de718-13c2-45ff-afc4-55063d0237fa",
            "d544ce7a-7f55-465c-88bd-0563b42c7791"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "7a659c5e-07e1-4218-a2fd-0f849b6667bf",
          "title": "5.\tComo administrador, necesito eliminar usuarios del sistema",
          "fullFile": "C:\\Users\\korn1\\OneDrive\\Escritorio\\CESUN\\C09_01_PROGRAMACIÓN ORIENTADA A PRUEBAS\\tdd_Integrador\\test\\05 eliminarUsuariosAdministrador.test.js",
          "file": "\\test\\05 eliminarUsuariosAdministrador.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "a.\tUsuario eliminado correctamente",
              "fullTitle": "5.\tComo administrador, necesito eliminar usuarios del sistema a.\tUsuario eliminado correctamente",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const usuario = administradorPrueba;\nconst resultado = eliminarUsuarioAdministrador(usuario, usuarioEliminar);\nexpect(resultado).to.equal(true);",
              "err": {},
              "uuid": "3ecac325-84eb-44ed-8806-4cb9c21a51fb",
              "parentUUID": "7a659c5e-07e1-4218-a2fd-0f849b6667bf",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "b.\tError al intentar eliminar sin tener Rol Administrador",
              "fullTitle": "5.\tComo administrador, necesito eliminar usuarios del sistema b.\tError al intentar eliminar sin tener Rol Administrador",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const usuario = liderPrueba;\nassert.throws(\n  () => eliminarUsuarioAdministrador(usuario, usuarioEliminar),\n  Error,\n  \"Su rol no cuenta con el permiso necesario\"\n);",
              "err": {},
              "uuid": "0918be74-62ed-4bd8-acd7-81c7b715dfef",
              "parentUUID": "7a659c5e-07e1-4218-a2fd-0f849b6667bf",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "c.\tError, Usuario no existe en el sistema",
              "fullTitle": "5.\tComo administrador, necesito eliminar usuarios del sistema c.\tError, Usuario no existe en el sistema",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const usuario = administradorPrueba;\nconst usuarioAEliminar = {\n  id: null,\n  nombre: \"prueba\",\n  password: \"prueba\",\n  rol: \"empleado\",\n};\nassert.throws(\n  () => eliminarUsuarioAdministrador(usuario, usuarioAEliminar),\n  Error,\n  \"Usuario no existe\"\n);",
              "err": {},
              "uuid": "a81a9325-102f-457d-b440-a0ead6719b21",
              "parentUUID": "7a659c5e-07e1-4218-a2fd-0f849b6667bf",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "3ecac325-84eb-44ed-8806-4cb9c21a51fb",
            "0918be74-62ed-4bd8-acd7-81c7b715dfef",
            "a81a9325-102f-457d-b440-a0ead6719b21"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "c70f0f0c-c9ec-47b0-aa91-5cde01dd09be",
          "title": "6.\tComo Administrador, necesitó acceder a lista de Ventas por Sucursal.",
          "fullFile": "C:\\Users\\korn1\\OneDrive\\Escritorio\\CESUN\\C09_01_PROGRAMACIÓN ORIENTADA A PRUEBAS\\tdd_Integrador\\test\\06 listaVentasSucursalAdministrador.test.js",
          "file": "\\test\\06 listaVentasSucursalAdministrador.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "a.\tRecibe una lista en formato de arreglo",
              "fullTitle": "6.\tComo Administrador, necesitó acceder a lista de Ventas por Sucursal. a.\tRecibe una lista en formato de arreglo",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const user = administradorPrueba;\nconst sucursal = \"Sucursal prueba3\";\nconst resultado = listaVentasporSucursalAdministrador(user, sucursal);\nexpect(resultado).to.be.an(\"array\");",
              "err": {},
              "uuid": "5c41555c-0834-4211-bbda-8df6de4b01f5",
              "parentUUID": "c70f0f0c-c9ec-47b0-aa91-5cde01dd09be",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "b.\tError, al intentar obtener información sin ser Administrador",
              "fullTitle": "6.\tComo Administrador, necesitó acceder a lista de Ventas por Sucursal. b.\tError, al intentar obtener información sin ser Administrador",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const usuario = liderPrueba;\nconst sucursal = \"Sucursal prueba3\";\nassert.throws(\n  () => listaVentasporSucursalAdministrador(usuario, \"Branch1\"),\n  Error,\n  \"Su rol no cuenta con el permiso necesarios\"\n);",
              "err": {},
              "uuid": "13a79642-8399-404b-babc-bfdfdef48f96",
              "parentUUID": "c70f0f0c-c9ec-47b0-aa91-5cde01dd09be",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Error, si el parametro sucursal esta vacio",
              "fullTitle": "6.\tComo Administrador, necesitó acceder a lista de Ventas por Sucursal. Error, si el parametro sucursal esta vacio",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const usuario = administradorPrueba;\nassert.throws(\n  () => listaVentasporSucursalAdministrador(usuario, \"\"),\n  Error,\n  \"Falta nombre de Sucursal\"\n);",
              "err": {},
              "uuid": "b1fe5354-3f9e-4008-84a3-3cd2d6f09a4d",
              "parentUUID": "c70f0f0c-c9ec-47b0-aa91-5cde01dd09be",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Error, si sucursal no existe",
              "fullTitle": "6.\tComo Administrador, necesitó acceder a lista de Ventas por Sucursal. Error, si sucursal no existe",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const usuario = administradorPrueba;\nassert.throws(\n  () => listaVentasporSucursalAdministrador(usuario, \"Branch5\"),\n  Error,\n  \"Sucursal no existe\"\n);",
              "err": {},
              "uuid": "a8d0fd61-d8d0-4463-8fae-093848ba731b",
              "parentUUID": "c70f0f0c-c9ec-47b0-aa91-5cde01dd09be",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "5c41555c-0834-4211-bbda-8df6de4b01f5",
            "13a79642-8399-404b-babc-bfdfdef48f96",
            "b1fe5354-3f9e-4008-84a3-3cd2d6f09a4d",
            "a8d0fd61-d8d0-4463-8fae-093848ba731b"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "cabd9c57-e156-44ba-94e3-00fd18f6b9c5",
          "title": "8.\tComo Administrador, necesito poder dar de alta usuarios",
          "fullFile": "C:\\Users\\korn1\\OneDrive\\Escritorio\\CESUN\\C09_01_PROGRAMACIÓN ORIENTADA A PRUEBAS\\tdd_Integrador\\test\\08 registroProductosAdministrador.test.js",
          "file": "\\test\\08 registroProductosAdministrador.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "a.\tProducto creado correctamente",
              "fullTitle": "8.\tComo Administrador, necesito poder dar de alta usuarios a.\tProducto creado correctamente",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const usuario = administradorPrueba;\nconst nuevoProducto = {\n  nombre: \"Producto nuevo\",\n  cantidad: 99,\n  receta: true,\n  sucursal: \"sucursal nueva\",\n};\nconst resultado = adminCrearProducto(usuario, nuevoProducto);\nexpect(resultado).to.be.true;",
              "err": {},
              "uuid": "35f8d52b-ce23-4bfe-bb9e-c7ea8ceee3e9",
              "parentUUID": "cabd9c57-e156-44ba-94e3-00fd18f6b9c5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "b.\tError si producto esta duplicado",
              "fullTitle": "8.\tComo Administrador, necesito poder dar de alta usuarios b.\tError si producto esta duplicado",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const usuario = administradorPrueba;\nconst nuevoProducto = {\n  nombre: \"Producto prueba\",\n  receta: true,\n  sucursal: \"sucursalPrueba\",\n};\nassert.throws(\n  () => adminCrearProducto(usuario, nuevoProducto),\n  Error,\n  \"Error producto duplicado\"\n);",
              "err": {},
              "uuid": "612cf3fd-a595-4c48-b575-95d3246b229a",
              "parentUUID": "cabd9c57-e156-44ba-94e3-00fd18f6b9c5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "c.\tError al intentar crear sin tener Rol Administrador",
              "fullTitle": "8.\tComo Administrador, necesito poder dar de alta usuarios c.\tError al intentar crear sin tener Rol Administrador",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const usuario = empleadoPrueba;\nconst nuevoProducto = {\n  nombre: \"Producto nuevo\",\n  cantidad: 99,\n  sucursal: \"sucursal nueva\",\n};\nassert.throws(\n  () => adminCrearProducto(usuario, nuevoProducto),\n  Error,\n  \"Su rol no cuenta con el permiso necesario\"\n);",
              "err": {},
              "uuid": "601b51df-d747-4d54-81c3-f1d8f442a112",
              "parentUUID": "cabd9c57-e156-44ba-94e3-00fd18f6b9c5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "d.\tError parámetros incorrectos (nombre, sucursal, receta)",
              "fullTitle": "8.\tComo Administrador, necesito poder dar de alta usuarios d.\tError parámetros incorrectos (nombre, sucursal, receta)",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const usuario = administradorPrueba;\nconst nuevoProducto = {\n  nombre: \"\",\n  cantidad: \"\",\n  sucursal: \"\",\n  receta: \"\",\n};\nassert.throws(\n  () => adminCrearProducto(usuario, nuevoProducto),\n  Error,\n  \"Nombre de producto, sucursal, estado de receta vacia\"\n);",
              "err": {},
              "uuid": "68ffcdbe-cbf5-43bd-be3e-7b1a9617c1dc",
              "parentUUID": "cabd9c57-e156-44ba-94e3-00fd18f6b9c5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "e.\tError por Usuario sin parametros suficientes",
              "fullTitle": "8.\tComo Administrador, necesito poder dar de alta usuarios e.\tError por Usuario sin parametros suficientes",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const usuario = administradorPrueba;\nconst nuevoProducto = {};\nassert.throws(\n  () => adminCrearProducto(usuario, nuevoProducto),\n  Error,\n  \"Faltan parametros\"\n);",
              "err": {},
              "uuid": "86e92252-247a-4137-a6f2-e89081fb9249",
              "parentUUID": "cabd9c57-e156-44ba-94e3-00fd18f6b9c5",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "35f8d52b-ce23-4bfe-bb9e-c7ea8ceee3e9",
            "612cf3fd-a595-4c48-b575-95d3246b229a",
            "601b51df-d747-4d54-81c3-f1d8f442a112",
            "68ffcdbe-cbf5-43bd-be3e-7b1a9617c1dc",
            "86e92252-247a-4137-a6f2-e89081fb9249"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 3,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "bb55be88-887a-4db5-9056-d9bd9df3a3a4",
          "title": "10.\tComo administrador, necesito eliminar productos del sistema",
          "fullFile": "C:\\Users\\korn1\\OneDrive\\Escritorio\\CESUN\\C09_01_PROGRAMACIÓN ORIENTADA A PRUEBAS\\tdd_Integrador\\test\\10 eliminarProductoAdministrador.test.js",
          "file": "\\test\\10 eliminarProductoAdministrador.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "a.\tProducto eliminado correctamente",
              "fullTitle": "10.\tComo administrador, necesito eliminar productos del sistema a.\tProducto eliminado correctamente",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const usuario = administradorPrueba;\nconst resultado = eliminarProductoAdministrador(usuario, productoPrueba);\nexpect(resultado).to.equal(true);",
              "err": {},
              "uuid": "1b284260-432f-46f5-ae5b-73eb18dae70f",
              "parentUUID": "bb55be88-887a-4db5-9056-d9bd9df3a3a4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "b.\tError al intentar eliminar sin tener Rol Administrador",
              "fullTitle": "10.\tComo administrador, necesito eliminar productos del sistema b.\tError al intentar eliminar sin tener Rol Administrador",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const usuario = liderPrueba;\nassert.throws(\n  () => eliminarProductoAdministrador(usuario, productoPrueba),\n  Error,\n  \"Su rol no cuenta con el permiso necesario\"\n);",
              "err": {},
              "uuid": "c668c7e2-60af-42b1-a088-e603700f1682",
              "parentUUID": "bb55be88-887a-4db5-9056-d9bd9df3a3a4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "c.\tError, no existe el Producto en el sistema",
              "fullTitle": "10.\tComo administrador, necesito eliminar productos del sistema c.\tError, no existe el Producto en el sistema",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const usuario = administradorPrueba;\nconst producto = {\n  id: null,\n  nombre: \"prueba\",\n  precio: 100,\n  cantidad: 10,\n  sucursal: \"sucursal nueva\",\n};\nassert.throws(\n  () => eliminarProductoAdministrador(usuario, producto),\n  Error,\n  \"Producto no existe\"\n);",
              "err": {},
              "uuid": "79af9378-08c2-43a2-a5a0-1083cc9080cf",
              "parentUUID": "bb55be88-887a-4db5-9056-d9bd9df3a3a4",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "1b284260-432f-46f5-ae5b-73eb18dae70f",
            "c668c7e2-60af-42b1-a088-e603700f1682",
            "79af9378-08c2-43a2-a5a0-1083cc9080cf"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "32f2e8ba-dd5f-4fa9-97a6-9f3a97852171",
          "title": "11.\tComo Administrador, necesito poder dar de alta sucursales",
          "fullFile": "C:\\Users\\korn1\\OneDrive\\Escritorio\\CESUN\\C09_01_PROGRAMACIÓN ORIENTADA A PRUEBAS\\tdd_Integrador\\test\\11 registroSucursalAdministrador.test.js",
          "file": "\\test\\11 registroSucursalAdministrador.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "a.\tSucursal creada correctamente",
              "fullTitle": "11.\tComo Administrador, necesito poder dar de alta sucursales a.\tSucursal creada correctamente",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const usuario = administradorPrueba;\nconst nuevaSucursal = {\n  nombre: \"Sucursal nueva\",\n  direccion: \"Direccion Sucursal nueva\",\n};\nconst resultado = adminCrearSucursal(usuario, nuevaSucursal);\nexpect(resultado).to.be.true;",
              "err": {},
              "uuid": "058f6475-d619-40ff-a0b8-f3671d5d7c03",
              "parentUUID": "32f2e8ba-dd5f-4fa9-97a6-9f3a97852171",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "b.\tError si Sucursal esta duplicada",
              "fullTitle": "11.\tComo Administrador, necesito poder dar de alta sucursales b.\tError si Sucursal esta duplicada",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const usuario = administradorPrueba;\nconst nuevaSucursal = {\n  nombre: \"Sucursal prueba\",\n  direccion: \"Direccion Sucursal prueba\",\n};\nassert.throws(\n  () => adminCrearSucursal(usuario, nuevaSucursal),\n  Error,\n  \"Error sucursal duplicada\"\n);",
              "err": {},
              "uuid": "33c40a4d-1283-4548-9c32-59d0f068276d",
              "parentUUID": "32f2e8ba-dd5f-4fa9-97a6-9f3a97852171",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "c.\tError al intentar crear sin tener Rol ",
              "fullTitle": "11.\tComo Administrador, necesito poder dar de alta sucursales c.\tError al intentar crear sin tener Rol ",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const usuario = empleadoPrueba;\nconst nuevaSucursal = {\n  nombre: \"Sucursal nueva\",\n  direccion: \"Direccion Sucursal nueva\",\n};\nassert.throws(\n  () => adminCrearSucursal(usuario, nuevaSucursal),\n  Error,\n  \"Su rol no cuenta con el permiso necesario\"\n);",
              "err": {},
              "uuid": "69d892ea-fc25-471f-a0f1-a92d11eab231",
              "parentUUID": "32f2e8ba-dd5f-4fa9-97a6-9f3a97852171",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "d.\tError parámetros incorrectos (nombre, dirección)",
              "fullTitle": "11.\tComo Administrador, necesito poder dar de alta sucursales d.\tError parámetros incorrectos (nombre, dirección)",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const usuario = administradorPrueba;\nconst nuevaSucursal = {\n  nombre: \"\",\n  direccion: \"\",\n};\nassert.throws(\n  () => adminCrearSucursal(usuario, nuevaSucursal),\n  Error,\n  \"Nombre de sucursal o direccion estan vacia\"\n);",
              "err": {},
              "uuid": "74802913-6d08-461d-b952-af71c83a245a",
              "parentUUID": "32f2e8ba-dd5f-4fa9-97a6-9f3a97852171",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "e.\tError por Sucursal sin parámetros suficientes",
              "fullTitle": "11.\tComo Administrador, necesito poder dar de alta sucursales e.\tError por Sucursal sin parámetros suficientes",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const usuario = administradorPrueba;\nconst nuevaSucursal = {};\nassert.throws(\n  () => adminCrearSucursal(usuario, nuevaSucursal),\n  Error,\n  \"Faltan parametros\"\n);",
              "err": {},
              "uuid": "24509ff5-8cf4-48bd-83cd-74b8834903ec",
              "parentUUID": "32f2e8ba-dd5f-4fa9-97a6-9f3a97852171",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "058f6475-d619-40ff-a0b8-f3671d5d7c03",
            "33c40a4d-1283-4548-9c32-59d0f068276d",
            "69d892ea-fc25-471f-a0f1-a92d11eab231",
            "74802913-6d08-461d-b952-af71c83a245a",
            "24509ff5-8cf4-48bd-83cd-74b8834903ec"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "fe4f1de7-7c94-47e9-8deb-3fe1e2e67f47",
          "title": "12.\tComo Administrador, necesito poder modificar Sucursales del sistema.",
          "fullFile": "C:\\Users\\korn1\\OneDrive\\Escritorio\\CESUN\\C09_01_PROGRAMACIÓN ORIENTADA A PRUEBAS\\tdd_Integrador\\test\\12 actualizaSucursalesAdministrador.test.js",
          "file": "\\test\\12 actualizaSucursalesAdministrador.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "a.\tSucursal fue modificada correctamente",
              "fullTitle": "12.\tComo Administrador, necesito poder modificar Sucursales del sistema. a.\tSucursal fue modificada correctamente",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const usuario = administradorPrueba;\nconst resultado = actualizarSucursalAdministrador(usuario, sucursalPrueba);\nreturn expect(resultado).to.be.true;",
              "err": {},
              "uuid": "3c872b7c-76e3-47b9-ba22-75bc969b4563",
              "parentUUID": "fe4f1de7-7c94-47e9-8deb-3fe1e2e67f47",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "b.\tError al intentar crear sin tener Rol Administrador",
              "fullTitle": "12.\tComo Administrador, necesito poder modificar Sucursales del sistema. b.\tError al intentar crear sin tener Rol Administrador",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const usuario = liderPrueba;\nassert.throws(\n  () => actualizarSucursalAdministrador(usuario, sucursalPrueba),\n  Error,\n  \"Su rol no cuenta con el permiso necesario\"\n);",
              "err": {},
              "uuid": "cbf8b688-f822-41a6-8229-06f95f3c7452",
              "parentUUID": "fe4f1de7-7c94-47e9-8deb-3fe1e2e67f47",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "c.\tValida parámetros correctos",
              "fullTitle": "12.\tComo Administrador, necesito poder modificar Sucursales del sistema. c.\tValida parámetros correctos",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const usuario = administradorPrueba;\nconst sucursal = {\n  nombre: \"\",\n  direccion: \"\",\n};\nassert.throws(\n  () => actualizarSucursalAdministrador(usuario, sucursal),\n  Error,\n  \"Nombre de Sucursal o direccion vacios\"\n);",
              "err": {},
              "uuid": "60a38f74-a0e1-4668-ba58-eb6f6fce54e3",
              "parentUUID": "fe4f1de7-7c94-47e9-8deb-3fe1e2e67f47",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "d.\tValida que la sucursal exista en la lista",
              "fullTitle": "12.\tComo Administrador, necesito poder modificar Sucursales del sistema. d.\tValida que la sucursal exista en la lista",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const usuario = administradorPrueba;\nconst sucursal = {\n  nombre: \"Sucursal prueba1\",\n  direccion: \"Direccion Sucursal prueba1\",\n};\nassert.throws(\n  () => actualizarSucursalAdministrador(usuario, sucursal),\n  Error,\n  \"Sucursal ya existe\"\n);",
              "err": {},
              "uuid": "ba01f2c0-618b-4be4-a08a-a65f23751e46",
              "parentUUID": "fe4f1de7-7c94-47e9-8deb-3fe1e2e67f47",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "3c872b7c-76e3-47b9-ba22-75bc969b4563",
            "cbf8b688-f822-41a6-8229-06f95f3c7452",
            "60a38f74-a0e1-4668-ba58-eb6f6fce54e3",
            "ba01f2c0-618b-4be4-a08a-a65f23751e46"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "0069e117-2059-48cf-a29f-f92c4272a98a",
          "title": "13.\tComo administrador, necesito eliminar sucursales del sistema",
          "fullFile": "C:\\Users\\korn1\\OneDrive\\Escritorio\\CESUN\\C09_01_PROGRAMACIÓN ORIENTADA A PRUEBAS\\tdd_Integrador\\test\\13 eliminarSucursalAdministrador.test.js",
          "file": "\\test\\13 eliminarSucursalAdministrador.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "a.\tSucursal eliminada correctamente",
              "fullTitle": "13.\tComo administrador, necesito eliminar sucursales del sistema a.\tSucursal eliminada correctamente",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const usuario = administradorPrueba;\nconst resultado = eliminarSucursalAdministrador(usuario, sucursalPrueba);\nexpect(resultado).to.equal(true);",
              "err": {},
              "uuid": "75016989-e228-49ff-9dda-0080657f31e1",
              "parentUUID": "0069e117-2059-48cf-a29f-f92c4272a98a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "b.\tError al intentar eliminar sin tener Rol Administrador",
              "fullTitle": "13.\tComo administrador, necesito eliminar sucursales del sistema b.\tError al intentar eliminar sin tener Rol Administrador",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const usuario = liderPrueba;\nassert.throws(\n  () => eliminarSucursalAdministrador(usuario, sucursalPrueba),\n  Error,\n  \"Su rol no cuenta con el permiso necesario\"\n);",
              "err": {},
              "uuid": "4b208e15-8749-4c0a-bc67-4fadd1132e9f",
              "parentUUID": "0069e117-2059-48cf-a29f-f92c4272a98a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "c.\tError, Sucursal no existe en el sistema",
              "fullTitle": "13.\tComo administrador, necesito eliminar sucursales del sistema c.\tError, Sucursal no existe en el sistema",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const usuario = administradorPrueba;\nconst sucursal = {\n  id: null,\n  nombre: \"Sucursal prueba\",\n  direccion: \"Direccion Sucursal prueba\",\n};\nassert.throws(\n  () => eliminarSucursalAdministrador(usuario, sucursal),\n  Error,\n  \"Sucursal no existe\"\n);",
              "err": {},
              "uuid": "fcf6c44c-ff42-497c-aa47-e38146277f3a",
              "parentUUID": "0069e117-2059-48cf-a29f-f92c4272a98a",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "75016989-e228-49ff-9dda-0080657f31e1",
            "4b208e15-8749-4c0a-bc67-4fadd1132e9f",
            "fcf6c44c-ff42-497c-aa47-e38146277f3a"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.1.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}